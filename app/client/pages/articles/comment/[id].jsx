import { useState, useEffect } from "react";
import md from "markdown-it";
import Head from "next/head";
import { useSupabaseClient } from "@supabase/auth-helpers-react";
import Layout from "../../../layout";
import UserContext from "../../../components/UserContext";
import { useContext } from "react";
import { useRouter } from "next/router";

export default function Comment({ id }) {
  const router = useRouter();
  const { user } = useContext(UserContext);
  const [message, setMessage] = useState(null);
  const [articles, setArticle] = useState(null);
  const supabase = useSupabaseClient();

  useEffect(() => {
    (async () => {
      let { data, error, status } = await supabase
        .from("articles")
        .select(`titre, contenu, auteur`)
        .eq("id", id)
        .single();
      setArticle(data);
    })();
  }, [id, supabase]);

  const onSubmit = async function (e) {
    e.preventDefault();
    const data = new FormData(e.target);
    const { error } = await supabase.from("contacts").insert([
      {
        firstname: data.get("firstname"),
        lastname: data.get("lastname"),
        email: data.get("email"),
        message: data.get("message"),
        user_id: user?.id,
        article_id: id,
      },
    ]);
    if (error) {
      setMessage("Sorry, an unexpected error occured.");
    } else {
      setMessage(
        <div>
          <h2 className="text-center mt-3">Confirmation</h2>
          <p>Thank you for contacting us. We will get back to you promptly.</p>
        </div>
      );
      router.push("/");
    }
  };

  return (
    <Layout>
      <Head>
        <title>WebTech - contact us</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h2 className="wt-title text-center mt-3">
        Envoie moi un{" "}
        <span className="underline decoration-sky-500">commentaire</span> :
      </h2>

      <form
        className="[&_span]:block grid gap-3 mt-4 mb-8  mx-auto text-slate-500 text-sm font-medium tracking-wide  sm:space-y-0 sm:grid-cols-2 sm:gap-6 sm:items-start sm:text-base border-solid border-2 border-gray-200 rounded-md p-6"
        onSubmit={onSubmit}
      >
        <div>
          <label>
            <span>Firstname</span>
            <input type="text" name="firstname"  className="px-4 py-2 bg-white rounded-lg dark:bg-gray-800 text-blue-700" value={user?.user_metadata?.firstname} disabled={user?.user_metadata?.firstname ? true : false} />
          </label>
        </div>
        <div>
          <label>
            <span>Lastname</span>
            <input type="text" name="lastname" className="px-4 py-2 bg-white rounded-lg dark:bg-gray-800 text-blue-700" value={user?.user_metadata?.lastname} disabled={user?.user_metadata?.lastname ? true : false} />
          </label>
        </div>
        <div>
          <label>
            <span>Email</span>
            <input type="text" name="email" className="px-4 py-2 bg-white rounded-lg dark:bg-gray-800 text-blue-700" value={user?.email} />
          </label>
        </div>
        <div>
          <label>
            <span>Message</span>
            <textarea name="message" className="px-4 py-2 bg-white rounded-t-lg dark:bg-gray-800 text-blue-700"/>
          </label>
        </div>
        <div>
          <button
            type="submit"
            class="flex  inline-block px-6 py-2.5 bg-green-500 text-white font-medium text-xs leading-tight uppercase rounded shadow-md hover:bg-green-600 hover:shadow-lg focus:bg-green-600 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-green-700 active:shadow-lg transition duration-150 ease-in-out"
          >
            Envoyer
          </button>
        </div>
      </form>

    
      {message && (
        <div
          aria-label="Overlow below the drawer dialog"
          className="fixed inset-0 bg-black/80 flex items-center justify-center"
          onClick={() => setMessage(null)}
          role="dialog"
        >
          <div
            aria-label="Alert pane"
            className="max-h-[90vh] max-w-[95vw] overflow-auto p-4 prose bg-white"
          >
            {message}
          </div>
        </div>
      )}
      <br />
      <h3 className="wt-title mt-4 mb-2 text-center text-2xl font-bold tracking-wide leading-7 text-white-900 sm:text-3xl sm:truncate">
        Mon email :
      </h3>

      <p className="text-center font-bold tracking-wide  text-white-900 sm:truncate hover:text-blue-500">
        <a href="mailto:{user?.email}">{user?.email}</a>
      </p>
    </Layout>
  );
}

export async function getServerSideProps(context) {
  console.log(context.params);
  return {
    props: {
      id: context.params.id,
    },
  };
}
